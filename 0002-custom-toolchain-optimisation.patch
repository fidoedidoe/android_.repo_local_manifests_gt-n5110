NOTES:
These optimisations require dropping the standard/bundled android toolchains. At the time of writing I replaced the following pre-built toolchains (keeping the original directory name): 
prebuilts/gcc/linux-x86/arm/
1) arm-eabi-4.8/ -> 
   https://releases.linaro.org/components/toolchain/binaries/latest-7/arm-eabi/gcc-linaro-7.4.1-2019.02-x86_64_arm-eabi.tar.xz  
2) arm-linux-androideabi-4.9/ ->  
   https://github.com/ArchiDroid/Toolchain/tree/uber-4.9-arm-linux-androideabi

DO NOT apply this patch if you're using standard android toolchain(s)
  
diff --git a/build/core/combo/TARGET_linux-arm.mk b/build/core/combo/TARGET_linux-arm.mk
index 510aae5..925d041 100644
--- a/build/core/combo/TARGET_linux-arm.mk
+++ b/build/core/combo/TARGET_linux-arm.mk
@@ -71,17 +71,64 @@ endef
 
 $(combo_2nd_arch_prefix)TARGET_NO_UNDEFINED_LDFLAGS := -Wl,--no-undefined
 
-$(combo_2nd_arch_prefix)TARGET_arm_CFLAGS :=    -O2 \
+
+$(combo_2nd_arch_prefix)TARGET_arm_CFLAGS :=    -O3 \
                         -fomit-frame-pointer \
                         -fstrict-aliasing    \
                         -funswitch-loops
 
+
 # Modules can choose to compile some source as thumb.
 $(combo_2nd_arch_prefix)TARGET_thumb_CFLAGS :=  -mthumb \
-                        -Os \
+                        -O3 \
                         -fomit-frame-pointer \
                         -fno-strict-aliasing
 
+
+$(combo_2nd_arch_prefix)TARGET_GLOBAL_CFLAGS +=  -O3 \
+                        -fgcse-las \
+                        -fgcse-sm \
+                        -fipa-pta \
+                        -fivopts \
+                        -fomit-frame-pointer \
+                        -frename-registers \
+                        -fsection-anchors \
+                        -ftracer \
+                        -ftree-loop-im \
+                        -ftree-loop-ivcanon \
+                        -funsafe-loop-optimizations \
+                        -fweb \
+                        -funswitch-loops \
+                        -Wno-error=array-bounds \
+                        -Wno-error=clobbered \
+                        -Wno-error=maybe-uninitialized \
+                        -Wno-error=strict-overflow \
+                        -fgraphite \
+                        -fgraphite-identity
+
+$(combo_2nd_arch_prefix)TARGET_GLOBAL_CPPFLAGS += -O3 \
+                        -fgcse-las \
+                        -fgcse-sm \
+                        -fipa-pta \
+                        -fivopts \
+                        -fomit-frame-pointer \
+                        -frename-registers \
+                        -fsection-anchors \
+                        -ftracer \
+                        -ftree-loop-im \
+                        -ftree-loop-ivcanon \
+                        -funsafe-loop-optimizations \
+                        -fweb \
+                        -funswitch-loops \
+                        -Wno-error=array-bounds \
+                        -Wno-error=clobbered \
+                        -Wno-error=maybe-uninitialized \
+                        -Wno-error=strict-overflow \
+                        -fgraphite \
+                        -fgraphite-identity
+
+$(combo_2nd_arch_prefix)TARGET_GLOBAL_LDFLAGS += -Wl,--sort-common
+
 # Set FORCE_ARM_DEBUGGING to "true" in your buildspec.mk
 # or in your environment to force a full arm build, even for
 # files that are normally built as thumb; this can make
@@ -114,7 +161,7 @@ $(combo_2nd_arch_prefix)TARGET_GLOBAL_CFLAGS += \
 # "-Wall -Werror" due to a commom idiom "ALOGV(mesg)" where ALOGV is turned
 # into no-op in some builds while mesg is defined earlier. So we explicitly
 # disable "-Wunused-but-set-variable" here.
-ifneq ($(filter 4.6 4.6.% 4.7 4.7.% 4.8 4.9, $($(combo_2nd_arch_prefix)TARGET_GCC_VERSION)),)
+ifneq ($(filter 4.6 4.6.% 4.7 4.7.% 4.8 4.8.% 4.9 4.9.% 5.1 5.1.% 7.4 7.4.%, $($(combo_2nd_arch_prefix)TARGET_GCC_VERSION)),)
 $(combo_2nd_arch_prefix)TARGET_GLOBAL_CFLAGS += -fno-builtin-sin \
 			-fno-strict-volatile-bitfields
 endif
@@ -148,7 +195,6 @@ $(combo_2nd_arch_prefix)TARGET_GLOBAL_CPPFLAGS += -fvisibility-inlines-hidden
 # More flags/options can be added here
 $(combo_2nd_arch_prefix)TARGET_RELEASE_CFLAGS := \
 			-DNDEBUG \
-			-g \
 			-Wstrict-aliasing=2 \
 			-fgcse-after-reload \
 			-frerun-cse-after-loop \
diff --git a/build/core/combo/TARGET_linux-arm64.mk b/build/core/combo/TARGET_linux-arm64.mk
index 6a1d861..c13f825 100644
--- a/build/core/combo/TARGET_linux-arm64.mk
+++ b/build/core/combo/TARGET_linux-arm64.mk
@@ -125,10 +125,55 @@ TARGET_GLOBAL_LDFLAGS += -Wl,--allow-shlib-undefined
 
 TARGET_GLOBAL_CPPFLAGS += -fvisibility-inlines-hidden
 
+TARGET_GLOBAL_CFLAGS +=  -O3 \
+                        -fgcse-las \
+                        -fgcse-sm \
+                        -fipa-pta \
+                        -fivopts \
+                        -fomit-frame-pointer \
+                        -frename-registers \
+                        -fsection-anchors \
+                        -ftracer \
+                        -ftree-loop-im \
+                        -ftree-loop-ivcanon \
+                        -funsafe-loop-optimizations \
+                        -fweb \
+                        -funswitch-loops \
+                        -Wno-error=array-bounds \
+                        -Wno-error=clobbered \
+                        -Wno-error=maybe-uninitialized \
+                        -Wno-error=strict-overflow \
+                        -fgraphite \
+                        -fgraphite-identity
+
+TARGET_GLOBAL_CPPFLAGS += -O3 \
+                        -fgcse-las \
+                        -fgcse-sm \
+                        -fipa-pta \
+                        -fivopts \
+                        -fomit-frame-pointer \
+                        -frename-registers \
+                        -fsection-anchors \
+                        -ftracer \
+                        -ftree-loop-im \
+                        -ftree-loop-ivcanon \
+                        -funsafe-loop-optimizations \
+                        -fweb \
+                        -funswitch-loops \
+                        -Wno-error=array-bounds \
+                        -Wno-error=clobbered \
+                        -Wno-error=maybe-uninitialized \
+                        -Wno-error=strict-overflow \
+                        -fgraphite \
+                        -fgraphite-identity
+
+TARGET_GLOBAL_LDFLAGS += -Wl,--sort-common
+
+
 # More flags/options can be added here
 TARGET_RELEASE_CFLAGS := \
 			-DNDEBUG \
-			-O2 -g \
+			-O3 \
 			-Wstrict-aliasing=2 \
 			-fgcse-after-reload \
 			-frerun-cse-after-loop \
diff --git a/build/core/combo/select.mk b/build/core/combo/select.mk
index 97d62c6..7035c0d 100644
--- a/build/core/combo/select.mk
+++ b/build/core/combo/select.mk
@@ -34,7 +34,7 @@ $(combo_var_prefix)AR := $(AR)
 $(combo_var_prefix)STRIP := $(STRIP)
 
 $(combo_var_prefix)GLOBAL_CFLAGS := -fno-exceptions -Wno-multichar $(BOARD_GLOBAL_CFLAGS)
-$(combo_var_prefix)RELEASE_CFLAGS := -O2 -g -fno-strict-aliasing $(BOARD_RELEASE_CFLAGS)
+$(combo_var_prefix)RELEASE_CFLAGS := -O3 -fno-strict-aliasing $(BOARD_RELEASE_CFLAGS)
 $(combo_var_prefix)GLOBAL_CPPFLAGS := $(BOARD_GLOBAL_CPPFLAGS)
 $(combo_var_prefix)GLOBAL_LDFLAGS :=
 $(combo_var_prefix)GLOBAL_ARFLAGS := crsPD
diff --git a/vendor/cm/build/tasks/kernel.mk b/vendor/cm/build/tasks/kernel.mk
index 2967f07..3cef2b0 100644
--- a/vendor/cm/build/tasks/kernel.mk
+++ b/vendor/cm/build/tasks/kernel.mk
@@ -215,7 +215,7 @@ KERNEL_TOOLCHAIN_PREFIX ?= $(TARGET_KERNEL_CROSS_COMPILE_PREFIX)
 else ifeq ($(KERNEL_ARCH),arm64)
 KERNEL_TOOLCHAIN_PREFIX ?= aarch64-linux-androidkernel-
 else ifeq ($(KERNEL_ARCH),arm)
-KERNEL_TOOLCHAIN_PREFIX ?= arm-linux-androidkernel-
+KERNEL_TOOLCHAIN_PREFIX ?= arm-linux-androideabi-
 else ifeq ($(KERNEL_ARCH),x86)
 KERNEL_TOOLCHAIN_PREFIX ?= x86_64-linux-androidkernel-
 endif
diff --git a/build/core/clang/config.mk b/build/core/clang/config.mk
index 6cc3446..402d99e 100644
--- a/build/core/clang/config.mk
+++ b/build/core/clang/config.mk
@@ -90,6 +90,16 @@ CLANG_CONFIG_UNKNOWN_CFLAGS := \
   -Wunused-but-set-parameter \
   -Wunused-but-set-variable \
   -fdiagnostics-color \
+  -fipa-pta \
+  -fsection-anchors \
+  -ftree-loop-im \
+  -ftree-loop-ivcanon \
+  -fgcse-las \
+  -fgcse-sm \
+  -fivopts \
+  -ftracer \
+  -funsafe-loop-optimizations \
+  -fweb \
   -fdebug-prefix-map=/proc/self/cwd=
 
 # Clang flags for all host rules

diff --git a/build/core/Makefile b/build/core/Makefile
index 3fb4247..da9a1b6 100644
--- a/build/core/Makefile
+++ b/build/core/Makefile
@@ -1101,9 +1101,6 @@ define build-recoveryimage-target
   )
   $(if $(filter true,$(PRODUCTS.$(INTERNAL_PRODUCT).PRODUCT_SUPPORTS_VBOOT)), \
     $(VBOOT_SIGNER) $(FUTILITY) $(1).unsigned $(PRODUCTS.$(INTERNAL_PRODUCT).PRODUCT_VBOOT_SIGNING_KEY).vbpubk $(PRODUCTS.$(INTERNAL_PRODUCT).PRODUCT_VBOOT_SIGNING_KEY).vbprivk $(PRODUCTS.$(INTERNAL_PRODUCT).PRODUCT_VBOOT_SIGNING_SUBKEY).vbprivk $(1).keyblock $(1))
-  $(if $(filter true,$(BOARD_USES_RECOVERY_AS_BOOT)), \
-    $(hide) $(call assert-max-image-size,$(1),$(BOARD_BOOTIMAGE_PARTITION_SIZE)), \
-    $(hide) $(call assert-max-image-size,$(1),$(BOARD_RECOVERYIMAGE_PARTITION_SIZE)))
   @echo ----- Made recovery image: $(1) --------
 endef
 
